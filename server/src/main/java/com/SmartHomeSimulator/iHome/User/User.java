package com.SmartHomeSimulator.iHome.User;

import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

@Document(collection = "users")
public class User {

    public enum UserType {
        PARENT,
        CHILD,
        GUEST,
        STRANGER
    }
    
    @Id
    private ObjectId id;
    private String firstName;
    private String lastName;
    private String email;
    private String phoneNumber;
    private String password;
    private String location;
    private ObjectId houseId;
    private UserType userType;
    private boolean hasSHSPermission;
    private boolean hasSHCPermission;
    private boolean hasSHPPermission;
    private boolean hasSHHPermission;
    private boolean isLocationIndependant; //if a user is required to be home to have permission to manage any of the modules

    // Constructors

    public User() {
    }

    public User(String firstName, String lastName, String email, String phoneNumber, String password, String location,
            ObjectId houseId, UserType userType) {
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.phoneNumber = phoneNumber;
        this.password = password;
        this.location = location;
        this.houseId = houseId;
        this.userType = userType;
        setPermissions();
    }

    // Getters and Setters
    // (Generated by your IDE or manually written)

    // Getters
    public ObjectId getId() {
        return id;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getEmail() {
        return email;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public String getPassword() {
        return password;
    }

    public String getLocation() {
        return location;
    }

    public ObjectId getHouseId() {
        return houseId;
    }
    public UserType getUserType() { return userType; }
    public boolean getHasSHSPermission() { return hasSHSPermission; }
    public boolean getHasSHCPermission() { return hasSHCPermission; }
    public boolean getHasSHPPermission() { return hasSHPPermission; }
    public boolean getHasSHHPermission() { return hasSHHPermission; }
    public boolean getisLocationIndepandant() { return isLocationIndependant; }
    
   

    // Setters
    public void setId(ObjectId id) {
        this.id = id;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public void setHouseId(ObjectId housId) {
        this.houseId = housId;
    }

    public String toString() {
        return "User{" +
                "id='" + id + '\'' +
                ", firstName='" + firstName + '\'' +
                ", lastName='" + lastName + '\'' +
                ", email='" + email + '\'' +
                ", phoneNumber='" + phoneNumber + '\'' +
                // Notice we do not include the password for security reasons
                '}';
    }
    public void setUserType(UserType userType) { 
        this.userType = userType; 
        setPermissions();
    }

    //set permissions based on the type of user
    private void setPermissions() {
        switch(userType) {
            case PARENT:
                hasSHSPermission = true;
                hasSHCPermission = true;
                hasSHPPermission = true;
                hasSHHPermission = true;
                isLocationIndependant = true;
                break;

            case CHILD:
                hasSHSPermission = true;
                hasSHCPermission = true;
                hasSHPPermission = true;
                hasSHHPermission = true;
                isLocationIndependant = false;
                break;
            
            case GUEST:
                hasSHSPermission = true;
                hasSHCPermission = true;
                hasSHPPermission = true;
                hasSHHPermission = true;
                isLocationIndependant = false;
                break;

            case STRANGER:
                hasSHSPermission = false;
                hasSHCPermission = false;
                hasSHPPermission = false;
                hasSHHPermission = false;
                isLocationIndependant = false;
                break;
        }
    }

}